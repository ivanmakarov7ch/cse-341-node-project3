openapi: 3.0.0
info:
  title: Cake Ordering API
  version: 1.0.0
  description: |
    # üç∞ Cake Ordering API
    Manage **Users**, **Cakes**, **Orders**, and **Reviews**.
    - Users can register, login, and update info.
    - Cakes can be created, updated, deleted, and listed.
    - Orders track which user ordered which cake(s).
    - Reviews allow users to rate cakes.
servers:
  - url: https://cse-341-node-project3.onrender.com
  - url: http://localhost:3000

paths:
  # ===== Cakes =====
  /api/cakes:
    get:
      summary: Get all cakes
      tags:
        - Cakes
      responses:
        '200':
          description: List of cakes
    post:
      summary: Create a new cake
      tags:
        - Cakes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cake'
            example:
              name: Chocolate Heaven
              flavor: Chocolate
              description: Delicious chocolate cake
              price: 15.5
              available: true
      responses:
        '201':
          description: Cake created

  /api/cakes/{id}:
    get:
      summary: Get a single cake by ID
      tags:
        - Cakes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 650a1f9d3f1a4b2c3d4e5f6a
      responses:
        '200':
          description: Cake found
        '404':
          description: Cake not found
    put:
      summary: Update a cake by ID
      tags:
        - Cakes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 650a1f9d3f1a4b2c3d4e5f6a
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cake'
            example:
              name: Updated Chocolate Heaven
              flavor: Dark Chocolate
              price: 17
              available: false
      responses:
        '200':
          description: Cake updated
        '404':
          description: Cake not found
    delete:
      summary: Delete a cake by ID
      tags:
        - Cakes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 650a1f9d3f1a4b2c3d4e5f6a
      responses:
        '200':
          description: Cake deleted
        '404':
          description: Cake not found

  # ===== Users =====
  /api/users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: List of users
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: ivanmakarov7ch
              email: ivan@example.com
              password: supersecret
      responses:
        '201':
          description: User created

  /api/users/{id}:
    get:
      summary: Get a single user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 650a1f9d3f1a4b2c3d4e5f6b
      responses:
        '200':
          description: User found
        '404':
          description: User not found
    put:
      summary: Update a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 650a1f9d3f1a4b2c3d4e5f6b
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: newusername
              email: newemail@example.com
              password: newsecret
      responses:
        '200':
          description: User updated
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 650a1f9d3f1a4b2c3d4e5f6b
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found

  # ===== Orders =====
  /api/orders:
    get:
      summary: Get all orders
      tags:
        - Orders
      responses:
        '200':
          description: List of orders
    post:
      summary: Create a new order
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example:
              user: 650a1f9d3f1a4b2c3d4e5f6b
              cakes: ["650a1f9d3f1a4b2c3d4e5f6a"]
              total: 15.5
      responses:
        '201':
          description: Order created

  /api/orders/{id}:
    get:
      summary: Get a single order by ID
      tags:
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 650a2f9d3f1a4b2c3d4e5f6c
      responses:
        '200':
          description: Order found
        '404':
          description: Order not found
    put:
      summary: Update an order by ID
      tags:
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 650a2f9d3f1a4b2c3d4e5f6c
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example:
              cakes: ["650a1f9d3f1a4b2c3d4e5f6a", "650a1f9d3f1a4b2c3d4e5f6d"]
              total: 30
      responses:
        '200':
          description: Order updated
        '404':
          description: Order not found
    delete:
      summary: Delete an order by ID
      tags:
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 650a2f9d3f1a4b2c3d4e5f6c
      responses:
        '200':
          description: Order deleted
        '404':
          description: Order not found

  # ===== Reviews =====
  /api/reviews:
    get:
      summary: Get all reviews
      tags:
        - Reviews
      responses:
        '200':
          description: List of reviews
    post:
      summary: Create a new review
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
            example:
              user: 650a1f9d3f1a4b2c3d4e5f6b
              cake: 650a1f9d3f1a4b2c3d4e5f6a
              rating: 5
              comment: Excellent cake!
      responses:
        '201':
          description: Review created

  /api/reviews/{id}:
    get:
      summary: Get a single review by ID
      tags:
        - Reviews
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 650a3f9d3f1a4b2c3d4e5f6e
      responses:
        '200':
          description: Review found
        '404':
          description: Review not found
    put:
      summary: Update a review by ID
      tags:
        - Reviews
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 650a3f9d3f1a4b2c3d4e5f6e
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
            example:
              rating: 4
              comment: Very good cake
      responses:
        '200':
          description: Review updated
        '404':
          description: Review not found
    delete:
      summary: Delete a review by ID
      tags:
        - Reviews
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 650a3f9d3f1a4b2c3d4e5f6e
      responses:
        '200':
          description: Review deleted
        '404':
          description: Review not found

components:
  schemas:
    Cake:
      type: object
      properties:
        name:
          type: string
        flavor:
          type: string
        description:
          type: string
        price:
          type: number
        available:
          type: boolean
      required:
        - name
        - flavor
        - price

    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - username
        - email
        - password

    Order:
      type: object
      properties:
        user:
          type: string
          description: Mongo ID of the user
        cakes:
          type: array
          items:
            type: string
          description: Array of cake IDs
        total:
          type: number
      required:
        - user
       
