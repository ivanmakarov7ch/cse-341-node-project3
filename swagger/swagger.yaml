openapi: 3.0.0
info:
  title: Cake Ordering API
  version: 1.0.0
servers:
  - url: https://cse-341-node-project3.onrender.com
  - url: http://localhost:3000
components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: connect.sid
  schemas:
    Cake:
      type: object
      properties:
        name: { type: string }
        flavor: { type: string }
        description: { type: string }
        price: { type: number }
        available: { type: boolean }
      required: [name, flavor, price]
    User:
      type: object
      properties:
        username: { type: string }
        email: { type: string }
    Review:
      type: object
      properties:
        cake: { type: string }
        rating: { type: integer }
        comment: { type: string }
      required: [cake, rating]
    Order:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              cake: { type: string }
              quantity: { type: integer }
        totalPrice: { type: number }
      required: [items, totalPrice]
paths:
  /auth/github:
    get:
      summary: Login with GitHub (redirect)
      responses:
        '302': { description: Redirect to GitHub }
  /auth/logout:
    get:
      summary: Logout
      responses:
        '200': { description: Logged out }
  /auth/me:
    get:
      summary: Get current user
      responses:
        '200': { description: Current user returned }
        '401': { description: Not logged in }
  /api/cakes:
    get:
      summary: Get all cakes
      responses:
        '200': { description: list }
    post:
      summary: Create cake (authenticated)
      security: [ { sessionAuth: [] } ]
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Cake' }
      responses:
        '201': { description: Created }
        '401': { description: Unauthorized }
  /api/cakes/{id}:
    get:
      parameters: [ { name: id, in: path, required: true, schema: { type: string } } ]
      responses: { '200': { description: OK }, '404': { description: Not found } }
    put:
      security: [ { sessionAuth: [] } ]
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Cake' }
      responses: { '200': { description: Updated }, '401': { description: Unauthorized } }
    delete:
      security: [ { sessionAuth: [] } ]
      responses: { '200': { description: Deleted }, '401': { description: Unauthorized } }
  /api/reviews:
    get:
      responses: { '200': { description: list } }
    post:
      security: [ { sessionAuth: [] } ]
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Review' }
      responses: { '201': { description: Created }, '401': { description: Unauthorized } }
  /api/orders:
    get: { responses: { '200': { description: list } } }
    post:
      security: [ { sessionAuth: [] } ]
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Order' }
      responses: { '201': { description: Created }, '401': { description: Unauthorized } }
